package wit.fcl.json2beanfiles;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

/**
 * 对象解析器，把javaBean类文件的类按文件格式输出
 * 
 * @author fcl
 * @Date 2014-12-27 上午12:13:43
 */
public class ObjectPress {

	protected StringBuilder fileStringBuffer = new StringBuilder();
	protected ClassFileObject obj = null;

	protected boolean isNeedtoStringMethod = false;

	public ObjectPress(ClassFileObject obj,boolean isNeedToStringMethod) {
		this.obj = obj;
		this.isNeedtoStringMethod = isNeedToStringMethod;
	}
	public ObjectPress(ClassFileObject obj) {
		super();
		this.obj = obj;
	}

	private void addFieldInitMethod() {
		appendLine(space(1) + "public void init() {");
		List<FieldInfo> list = obj.getFields();
		for (FieldInfo fieldInfo : list) {
			String fieldName = checkAndAdd(fieldInfo.getFieldName(),
					CHECK_TYPE_INIT);
			appendLine(space(2) + fieldName + " = "
					+ fieldInfo.getDefualValue() + ";");
		}
		appendLine(space(1) + "}");
		appendLine();
	}

	protected boolean checkFieldsNameNotConatinsJavaKey(String field) {
		return !JavaKeyWords.containsJavaKey(field);
	}

	protected String tranlateFieldsNameKeyConflict(String field) {
		return field + "_";
	}

	protected String tranlateFieldsName(String field) {
		// TODO 目前只遇到含有 .的非法字段,还需要添加别的非法字符
		return field.replaceAll("\\.", "");
	}

	protected boolean checkFieldsNameVaid(String field) {
		String s = "([a-zA-Z_\\$][\\w\\$]*)";
		return field.matches(s);
	}

	private String serializedNameStatement(String fieldName) {
		return "@SerializedName(\"" + fieldName + "\")";
	}

	private final int CHECK_TYPE_STATEMENT = 0;
	private final int CHECK_TYPE_METHOD = 1;
	private final int CHECK_TYPE_INIT = 2;
	private boolean isContainSerializedStatement = false;

	private String checkAndAdd(String fieldName, int type) {
		String fieldNewName = fieldName;
		if (!checkFieldsNameVaid(fieldName)) {
			isContainSerializedStatement = true;
			if (type == CHECK_TYPE_STATEMENT) {
				// @SerializedName("XXX.XXX")
				appendLine(space(1) + serializedNameStatement(fieldName));
			}
			fieldNewName = tranlateFieldsName(fieldName);
		}
		// TODO 未考虑同时出现的情况，
		else if (!checkFieldsNameNotConatinsJavaKey(fieldName)) {
			isContainSerializedStatement = true;
			if (type == CHECK_TYPE_STATEMENT) {
				// @SerializedName("XXX.XXX")
				appendLine(space(1) + serializedNameStatement(fieldName));
			}
			fieldNewName = tranlateFieldsNameKeyConflict(fieldName);
		}
		return fieldNewName;
	}

	protected void addFieldStatement() {
		List<FieldInfo> list = obj.getFields();
		for (FieldInfo fieldInfo : list) {
			String fieldName = fieldInfo.getFieldName();
			String fieldNewName = checkAndAdd(fieldName, CHECK_TYPE_STATEMENT);
			appendLine(space(1) + "private " + fieldInfo.getType() + " "
					+ fieldNewName + ";");
		}
		appendLine();
	}

	protected void addGetSetMethod() {
		List<FieldInfo> list = obj.getFields();
		for (FieldInfo fieldInfo : list) {
			String fieldName = fieldInfo.getFieldName();
			String fieldNewName = checkAndAdd(fieldName, CHECK_TYPE_METHOD);
			// set method
			appendLine(space(1) + "public void set"
					+ toUpperFirstLetter(fieldNewName) + "("
					+ fieldInfo.getType() + " " + fieldNewName + ") {");
			appendLine(space(2) + "this." + fieldNewName + " = " + fieldNewName
					+ ";");
			appendLine(space(1) + "}");
			appendLine();

			// get method
			appendLine(space(1) + "public " + fieldInfo.getType() + " get"
					+ toUpperFirstLetter(fieldNewName) + "() {");
			appendLine(space(2) + "return this." + fieldNewName + ";");
			appendLine(space(1) + "}");
			appendLine();
		}
	}

	protected void appendLine() {
		appendLine("");
	}

	protected void appendLine(String line) {
		appendLine(fileStringBuffer, line);
	}

	private StringBuilder appendLine(StringBuilder sb, String line) {
		sb.append(line);
		sb.append("\r\n");
		return sb;
	}

	protected String generateInfo() {
		StringBuilder sb = new StringBuilder();
		sb.append("/*\r\n");
		sb.append(" THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY\r\n");
		sb.append(" DEVELOPER: FCL\r\n");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		sb.append(" " + sdf.format(new Date()) + "\r\n");
		sb.append(" */\r\n");
		return sb.toString();
	}

	private boolean isContentListElement() {
		List<FieldInfo> list = obj.getFields();
		for (FieldInfo fieldInfo : list) {
			if (fieldInfo.getType().startsWith("List<")) {
				return true;
			}
		}
		return false;
	}

	public void outputFile(File file, String charset) throws IOException {
		appendLine("package " + obj.getPacketName() + ";");
		appendLine();
		if(isNeedtoStringMethod)
		{
			appendLine("import java.net.URLEncoder;");
		}
		if (isContentListElement()) {
			appendLine("import java.util.List;");
			appendLine();
		}

		appendLine(generateInfo());
		appendLine("public class " + obj.getClassName() + " {");
		addFieldStatement();
		addFieldInitMethod();
		addGetSetMethod();
		// 为request 增加toString 方法
		if(isNeedtoStringMethod)
		{
			addFieldToStringMethod();
		}
		appendLine("}");
		
		// 解析后才要了解是不是导入
		if (isContainSerializedStatement) {
			insertSerializedName();
		}
		FileOutputStream fos = new FileOutputStream(file);
		fos.write(fileStringBuffer.toString().getBytes(charset));
		fos.close();
	}

	protected void addFieldToStringMethod() {
		List<FieldInfo> list = obj.getFields();
		appendLine(space(1)+"@Override");
		appendLine(space(1)+"public String toString() {");
		appendLine(space(2)+"try {");
		StringBuffer sb = new StringBuffer();
		sb.append("return \r\n");
		for (FieldInfo fieldInfo : list) {
			String fieldName = fieldInfo.getFieldName();
			String fieldNewName = checkAndAdd(fieldName, CHECK_TYPE_STATEMENT);
//			String value = fieldInfo.getDefualValue();
//				sb.append("\"&"+fieldNewName+"=\" + "+URLEncoder.encode(value,"UTF-8"));
			sb.append(space(2)+"\"&"+fieldNewName+"=\" + URLEncoder.encode("+fieldNewName+",\"UTF-8\") +\r\n");
		}
		sb.setCharAt(14, '?');
		sb.delete(sb.length()-3,sb.length()-1);
		sb.append(";");
		appendLine(space(1)+sb.toString());
		appendLine(space(2)+"}catch (Exception e) {}");
		appendLine(space(2)+"return \"\";");
		appendLine(space(1)+"}");
		appendLine();
	}
	private void insertSerializedName() {
		int pos = 8 + obj.getPacketName().length() + 3;
		String insertStr = "\r\nimport com.google.gson.annotations.SerializedName;\r\n";
		fileStringBuffer.insert(pos, insertStr);
	}

	protected String space(int n) {
		String res = "";
		for (int i = 0; i < n; i++) {
			res += "  ";
		}
		return res;
	}

	protected String toUpperFirstLetter(String field) {
		String s = field.substring(0, 1).toUpperCase()
				+ field.substring(1, field.length());
		return s;
	}

	public void print() {
		appendLine("package " + obj.getPacketName() + ";");
		appendLine();
		if (isContentListElement()) {
			appendLine("import java.util.List;");
			appendLine();
		}
		appendLine(generateInfo());
		appendLine("public class " + obj.getClassName() + " {");
		addFieldStatement();
		addFieldInitMethod();
		addGetSetMethod();
		appendLine("}");
		System.out.println(fileStringBuffer.toString());
	}
}
